def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "org.reanfoundation.patient"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk  {
            abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
            //abiFilters "armeabi-v7a", "x86"
        }
    }

    flavorDimensions "app"
    productFlavors {

        dev {
            dimension "app"
            applicationId "org.reanfoundation.patient.dev"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        aha_sac {
            dimension "app"
            applicationId "org.heart.lipidprofile"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        aha {
            dimension "app"
            applicationId "org.heart.hfpatient"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        aha_uat {
            dimension "app"
            applicationId "org.heart.hfpatient.uat"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        uat {
            dimension "app"
            applicationId "org.reanfoundation.patient.uat"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        prod {
            dimension "app"
            applicationId "org.reanfoundation.patient"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled true
            //useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            //signingConfig signingConfigs.release
        }
//        ndk {
//            abiFilters 'armeabi-v7a'
//        }
    }

//    debug {
//        minifyEnabled false
//        useProguard false
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //implementation 'com.google.firebase:firebase-analytics:17.2.3'
    //implementation 'com.google.firebase:firebase-messaging:20.1.3'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
